<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PISTON" Id="{103ce51c-b586-4a9e-935e-2be8c1d3f70d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PISTON
VAR_INPUT
	
	
	stPISTON:   REFERENCE TO ST_PISTON;
	bDepened_open1:BOOL:=TRUE;
	bDepened_open2:BOOL:=TRUE;
	bDepened_close1:BOOL:=TRUE;
	bDepened_close2:BOOL:=TRUE;
	
	
END_VAR
VAR_OUTPUT
	PistonStatus:ePistonStatus;
	
	
END_VAR
VAR
	bMANUAL:BOOL:=FALSE;
	sName:STRING;
	bCMD_OPEN_SWR: BOOL;
	bCMD_CLOSE_SWR: BOOL;
	bCMD_OPEN: BOOL;
	bSEN_OPEN AT%I*: BOOL;
	bSEN_CLOSE AT%I*: BOOL;
	timerOpening:ton;
	timerClosing:ton;
	timeoutOpening:ton;
	timeoutClosing:ton;
	bSTARTUP: BOOL:=FALSE;
	rtrigMANUAL: R_TRIG;
	rtrig_OPEN_ERROR: R_TRIG;
	rtrig_CLOSE_ERROR: R_TRIG;
	rtrig_OPEN_CONDITION: R_TRIG;
	rtrig_CLOSE_CONDITION: R_TRIG;
	bERROR:BOOL:=FALSE;
	bVALVE_OPEN: BOOL;
	bVALVE_CLOSE: BOOL;
	bError_Condition_open:BOOL;
	bError_Condition_close:BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF NOT bSTARTUP THEN
	bCMD_OPEN:=stPISTON.bOPEN_BY_DEFAULT;
	bSTARTUP:=TRUE;
	sName:=stPISTON.nNAME;
END_IF

rtrigMANUAL(CLK:= bMANUAL, Q=> );
IF rtrigMANUAL.Q THEN
	bCMD_OPEN:=bCMD_OPEN_SWR;
END_IF
// opening error timeout  triger
rtrig_OPEN_ERROR(CLK:=(timeoutOpening.Q AND (stPISTON.ePISTON_TYPE = E_PISTON_TYPE.ONLY_OPEN OR stPISTON.ePISTON_TYPE = E_PISTON_TYPE.BOTH)), Q=> );
IF rtrig_OPEN_ERROR.Q THEN
	PistonStatus:=ePistonStatus.ERROR;
	gEventText:='PISTON OPENING TIMEOUT:';
	A_OPEN_ERROR();
END_IF
// closing error timeout triger
rtrig_CLOSE_ERROR(CLK:=(timeoutClosing.Q AND (stPISTON.ePISTON_TYPE = E_PISTON_TYPE.ONLY_CLOSE OR stPISTON.ePISTON_TYPE = E_PISTON_TYPE.BOTH)), Q=> );
IF rtrig_CLOSE_ERROR.Q THEN
	PistonStatus:=ePistonStatus.ERROR;
	gEventText:='PISTON CLOSING TIMEOUT:';
	A_CLOSE_ERROR();
END_IF
//opening condition error triger
rtrig_OPEN_CONDITION(CLK:=bError_Condition_open, Q=> );
IF rtrig_OPEN_CONDITION.Q THEN
	PistonStatus:=ePistonStatus.ERROR;
	gEventText:='PISTON OPENING CONDITION:';
	A_OPEN_ERROR();
END_IF
//closing condition error triger
rtrig_CLOSE_CONDITION(CLK:=bError_Condition_close, Q=> );
IF rtrig_CLOSE_CONDITION.Q THEN
	PistonStatus:=ePistonStatus.ERROR;
	gEventText:='PISTON CLOSING CONDITION:';
	A_CLOSE_ERROR();
END_IF


timerOpening(IN:= bVALVE_OPEN, PT:=REAL_TO_TIME(stPISTON.openTime*1000) , Q=> , ET=> );
timerClosing(IN:= NOT bVALVE_OPEN, PT:=REAL_TO_TIME(stPISTON.closeTime*1000) , Q=> , ET=> );
timeoutOpening(IN:= bVALVE_OPEN AND NOT bSEN_OPEN, PT:= stPISTON.timeoutOpen, Q=> , ET=> );
timeoutClosing(IN:= NOT bVALVE_OPEN AND NOT bSEN_CLOSE, PT:= stPISTON.timeoutClose, Q=> , ET=> );

IF bMANUAL THEN
	IF bCMD_OPEN AND bDepened_open1 THEN
		bVALVE_OPEN:= bCMD_OPEN;
		bError_Condition_open:=FALSE;	
	ELSIF bCMD_OPEN AND NOT bDepened_open1 THEN
		bError_Condition_open:=TRUE; 
		//gEventText:='PISTON OPENING CONDITION:';
		//A_OPEN_ERROR();
	END_IF
	
	IF NOT bCMD_OPEN AND bDepened_close1 THEN
		bVALVE_OPEN:= bCMD_OPEN;
		bError_Condition_close:=FALSE;	
	ELSIF NOT bCMD_OPEN AND NOT bDepened_close1 THEN
		bError_Condition_close:=TRUE;
		//gEventText:='PISTON CLOSING CONDITION:';
		//A_CLOSE_ERROR();
	END_IF
	
ELSE
	IF bCMD_OPEN_SWR AND bDepened_open1 THEN
		bVALVE_OPEN:= bCMD_OPEN_SWR;
		bError_Condition_open:=FALSE;	
	ELSIF bCMD_OPEN_SWR AND NOT bDepened_open1 THEN
		bError_Condition_open:=TRUE;
		//gEventText:='PISTON OPENING CONDITION:';
		//A_OPEN_ERROR();
	END_IF
	
	IF NOT bCMD_OPEN_SWR AND bDepened_close1 THEN
		bVALVE_OPEN:= bCMD_OPEN_SWR;
		bError_Condition_close:=FALSE;	
	ELSIF NOT bCMD_OPEN_SWR AND NOT bDepened_close1 THEN
		bError_Condition_close:=TRUE;
		//gEventText:='PISTON CLOSING CONDITION:';
		//A_CLOSE_ERROR();
	END_IF
END_IF
bVALVE_CLOSE:=NOT bVALVE_OPEN;


CASE stPISTON.ePISTON_TYPE OF
	0://NO_SENSORS
		IF bVALVE_OPEN AND NOT timerOpening.Q THEN
			PistonStatus:=ePistonStatus.OPENING;
		ELSIF bVALVE_OPEN AND timerOpening.Q THEN
			PistonStatus:=ePistonStatus.OPENED;
		ELSIF bVALVE_CLOSE AND NOT timerClosing.Q THEN
			PistonStatus:=ePistonStatus.CLOSING;
		ELSIF bVALVE_CLOSE AND timerClosing.Q THEN
			PistonStatus:=ePistonStatus.CLOSED;
		END_IF
		
 
	
	1://only open sensor
	
		IF bVALVE_OPEN AND NOT bSEN_OPEN AND NOT timeoutOpening.Q THEN
			PistonStatus:=ePistonStatus.OPENING;
		ELSIF bVALVE_OPEN AND bSEN_OPEN THEN
			PistonStatus:=ePistonStatus.OPENED;
		ELSIF bVALVE_CLOSE AND NOT timerClosing.Q THEN
			PistonStatus:=ePistonStatus.CLOSING;
		ELSIF bVALVE_CLOSE AND timerClosing.Q THEN
			PistonStatus:=ePistonStatus.CLOSED;
		END_IF
	
	2:// only close sensor
		IF bVALVE_OPEN AND NOT timerOpening.Q THEN
			PistonStatus:=ePistonStatus.OPENING;
		ELSIF bVALVE_OPEN AND timerOpening.Q THEN
			PistonStatus:=ePistonStatus.OPENED;
		ELSIF bVALVE_CLOSE AND NOT bSEN_CLOSE AND NOT timeoutClosing.Q THEN
			PistonStatus:=ePistonStatus.CLOSING;
		ELSIF bVALVE_CLOSE AND bSEN_CLOSE THEN
			PistonStatus:=ePistonStatus.CLOSED;
		END_IF
	
	
	3://both sensors
		IF bVALVE_OPEN AND NOT bSEN_OPEN AND NOT timeoutOpening.Q THEN
			PistonStatus:=ePistonStatus.OPENING;
		ELSIF bVALVE_OPEN AND bSEN_OPEN THEN
			PistonStatus:=ePistonStatus.OPENED;
		ELSIF bVALVE_CLOSE AND NOT bSEN_CLOSE AND NOT timeoutClosing.Q THEN
			PistonStatus:=ePistonStatus.CLOSING;
		ELSIF bVALVE_CLOSE AND bSEN_CLOSE THEN
			PistonStatus:=ePistonStatus.CLOSED;
		END_IF
	
END_CASE

//IF timeoutOpening.Q AND (stPISTON.ePISTON_TYPE = E_PISTON_TYPE.ONLY_OPEN OR stPISTON.ePISTON_TYPE = E_PISTON_TYPE.BOTH)  THEN
//	PistonStatus:=ePistonStatus.ERROR;
//	A_OPEN_ERROR();
//END_IF
//IF timeoutClosing.Q  AND (stPISTON.ePISTON_TYPE = E_PISTON_TYPE.ONLY_CLOSE OR stPISTON.ePISTON_TYPE = E_PISTON_TYPE.BOTH)  THEN
//	PistonStatus:=ePistonStatus.ERROR;
//	A_CLOSE_ERROR();
//END_IF






]]></ST>
    </Implementation>
    <Action Name="A_CLOSE" Id="{445c1d90-1cac-4e57-b5b0-98b5b66b350e}">
      <Implementation>
        <ST><![CDATA[bCMD_OPEN_SWR:=FALSE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_CLOSE_ERROR" Id="{6846447f-a805-4330-b167-35718d596cb8}">
      <Implementation>
        <ST><![CDATA[gEventType:= 'Alarm'; 
gEventSeverity:= 'Error';
gEventIdentity:=1002;
gEventName:= stPISTON.nNAME;
fbEventLogger.mAdd();]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_DEFAULT" Id="{bf860e38-8780-47ac-ad74-e891a7c1d484}">
      <Implementation>
        <ST><![CDATA[
IF stPISTON.bOPEN_BY_DEFAULT THEN
	bCMD_OPEN_SWR:=TRUE;
ELSE
	bCMD_OPEN_SWR:=FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_OPEN" Id="{3cd0eff9-6206-4bfb-b1a8-efdd601fff3d}">
      <Implementation>
        <ST><![CDATA[bCMD_OPEN_SWR:=TRUE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_OPEN_ERROR" Id="{c3532af4-7ab4-45f6-aa4d-e3d03553aa97}">
      <Implementation>
        <ST><![CDATA[gEventType:= 'Alarm'; 
gEventSeverity:= 'Error';
gEventIdentity:=1001;
gEventName:= stPISTON.nNAME;
fbEventLogger.mAdd();]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_PISTON">
      <LineId Id="247" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="3" Count="9" />
      <LineId Id="156" Count="3" />
      <LineId Id="312" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="200" Count="2" />
      <LineId Id="313" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="324" Count="4" />
      <LineId Id="205" Count="0" />
      <LineId Id="333" Count="5" />
      <LineId Id="332" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="14" Count="10" />
      <LineId Id="314" Count="1" />
      <LineId Id="25" Count="6" />
      <LineId Id="319" Count="1" />
      <LineId Id="32" Count="7" />
      <LineId Id="316" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="40" Count="6" />
      <LineId Id="322" Count="1" />
      <LineId Id="47" Count="57" />
      <LineId Id="151" Count="0" />
      <LineId Id="105" Count="2" />
      <LineId Id="152" Count="0" />
      <LineId Id="108" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PISTON.A_CLOSE">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_PISTON.A_CLOSE_ERROR">
      <LineId Id="2" Count="2" />
      <LineId Id="6" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_PISTON.A_DEFAULT">
      <LineId Id="2" Count="4" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_PISTON.A_OPEN">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_PISTON.A_OPEN_ERROR">
      <LineId Id="2" Count="2" />
      <LineId Id="6" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>