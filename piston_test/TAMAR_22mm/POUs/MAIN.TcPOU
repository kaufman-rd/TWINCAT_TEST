<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{53f75a9f-ce5b-4537-a8c7-41cbbfdb1ac5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	counter1:INT:=0;
	counter:INT:=0;
	iNUMBER1 : INT:=2;
	sNAME1 : STRING(255):='23_5A';
	Trigger : BOOL;
	rtrigRESET: R_TRIG;
	rtrigE_STOP: R_TRIG;
	rtrigSTART: R_TRIG;
	rtrigPAUSE: R_TRIG;
	rtrigINIT: R_TRIG;
	ftrigRERUN: F_TRIG;
	temp_state:E_MAIN_STATE;
	temp_supply_state:E_STATION_STATE;
	temp_sep1_state:E_STATION_STATE;
	temp_sep2_state:E_STATION_STATE;
	temp_clean_state:E_STATION_STATE;
	temp_drop_state:E_STATION_STATE;
	temp_conv_state:E_CONVAYOR_STATE;
	temp_supconv_state:E_CONVAYOR_STATE;
	bHomed:BOOL:=FALSE;
	fbSEPARATION1: FB_SEPARATE;		
	fbSEPARATION2: FB_SEPARATE;	
	fbCLEAN: FB_CLEAN;
	fbDROP: FB_DROP;
	fbSUPPLY: FB_SUPPLY;
	fbMAIN_CONV: FB_MAIN_CONV;
	fbSUPPLY_CONV: FB_SUPPLY_CONV;
	
	
	action_timeout: TON:=(PT:=T#20S);
	move_timeout: TON;
	bTIMEOUT:BOOL:=FALSE;
	
	bFirstRun:BOOL:=TRUE;
END_VAR


   
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bFirstRun THEN
	fbEventLogger.mAdd();
	bFirstRun:=FALSE;
END_IF

//uIOLINK1.10:=1;
//uIOLINK1.11:=1;

rAnalogIn:=F_Linear(nanlogIn1,200,31170,0,2000);
//PISTONS_CYCLE();
A_PISTON_ERROR_CHECK();
fbMAIN_CONV(fbAxis:=Axis_MAIN);
fbSUPPLY_CONV(fbAxis:=Axis_SUPPLY);
fbSEPARATION1(piston_updown:=  fbPist[12],
			  piston_colet1:=  fbPist[14],
			   piston_colet2:=  fbPist[15],
			    piston_colet3:=  fbPist[16],
				 piston_colet4:=  fbPist[30],
			  piston_tray:=  fbPist[17],
			  piston_pins:=  fbPist[13],
			  piston_tray_door:=  fbPist[19],
			  piston_tray_push:=  fbPist[18],
			  eState:= eSEPARATE1,
			  station_num:=separate1_station_num);
	
fbSEPARATION2(piston_updown:=  fbPist[20],
			  piston_colet1:=  fbPist[22],
			   piston_colet2:=  fbPist[23],
			    piston_colet3:=  fbPist[24],
				 piston_colet4:=  fbPist[25],
			  piston_tray:=  fbPist[26],
			  piston_pins:=  fbPist[21],
			   piston_tray_door:=  fbPist[28],
			  piston_tray_push:=  fbPist[27],
			  eState:= eSEPARATE2,
 			  station_num:=separate2_station_num);	
	
fbCLEAN(pClean:=  fbPist[6]);
fbDROP(pPush:=  fbPist[9],pOpen1:=  fbPist[10],pOpen2:=  fbPist[11]);
fbSUPPLY(pPush:=fbPist[1],pLock1:=fbPist[2],pLock2:=fbPist[3],pOpen1:=fbPist[4],pOpen2:=fbPist[5]);
prg_CSV_V2();
MOTORS();
JACK_CYCLE();
PIST_CYCLE();
rtrigRESET(CLK:= b_RESET, Q=> );
rtrigE_STOP(CLK:= b_E_STOP, Q=> );
rtrigINIT(CLK:= bINIT_MAIN, Q=> );
rtrigSTART(CLK:= bSTART, Q=> );
rtrigPAUSE(CLK:= bPAUSE_MAIN, Q=> );
ftrigRERUN(CLK:= bPAUSE_MAIN, Q=> );
action_timeout(IN:=bTIMEOUT);

//MAIN_STATE_MACHINE:
CASE eMAIN_STATE OF
	E_MAIN_STATE.homing:   // homing fo all stations
		eSUPPLY := E_STATION_STATE.homing;
		eSEPARATE1 := E_STATION_STATE.homing;
		eSEPARATE2 := E_STATION_STATE.homing;
		eCLEAN := E_STATION_STATE.homing;
		eDROP := E_STATION_STATE.homing;
		eMAIN_CONVAYOR_STATE := E_CONVAYOR_STATE.homing;
		eSUPPLY_CONVAYOR_STATE:=E_CONVAYOR_STATE.homing;
		IF fbSEPARATION1.bHomed AND fbSEPARATION2.bHomed THEN
			eMAIN_STATE:=E_MAIN_STATE.idle;
			bHomed:=TRUE;
		END_IF
		
	E_MAIN_STATE.uninit:
		IF NOT bHomed THEN
			eMAIN_STATE:=E_MAIN_STATE.homing;
		ELSE
			bTIMEOUT:=FALSE;
			bPAUSE_MAIN:=FALSE;
			eSUPPLY := E_STATION_STATE.unInit;
			eSEPARATE1 := E_STATION_STATE.unInit;
			eSEPARATE2 := E_STATION_STATE.unInit;
			eCLEAN := E_STATION_STATE.unInit;
			eDROP := E_STATION_STATE.unInit;
			eMAIN_CONVAYOR_STATE := E_CONVAYOR_STATE.unInit;
			eSUPPLY_CONVAYOR_STATE:=E_CONVAYOR_STATE.unInit;
			eMAIN_STATE:=E_MAIN_STATE.idle;
		END_IF
		
		
		
	E_MAIN_STATE.idle:
		IF rtrigSTART.Q THEN
			IF b_sense_home1 AND NOT b_sense_home2 AND b_sense_home3 THEN 
				eMAIN_STATE:=E_MAIN_STATE.safety;
			END_IF
		END_IF
	
	E_MAIN_STATE.safety:
		A_SAFETY_CHECK();
		IF NOT b_E_STOP THEN
			eMAIN_STATE:=E_MAIN_STATE.do_actions;
		ELSE
			eMAIN_STATE:=E_MAIN_STATE.estop;
		END_IF
	
	E_MAIN_STATE.do_actions:
		bTIMEOUT:=TRUE;
		IF b_sense_home1 AND NOT b_sense_home2 AND b_sense_home3 THEN 
			IF eSUPPLY = E_STATION_STATE.idle THEN     
				eSUPPLY := E_STATION_STATE.do_action1;
			END_IF
			IF eSEPARATE1 = E_STATION_STATE.idle THEN
				eSEPARATE1 := E_STATION_STATE.do_action1;
			END_IF
			IF eSEPARATE2 = E_STATION_STATE.idle THEN
				eSEPARATE2 := E_STATION_STATE.do_action1;
			END_IF
			IF eCLEAN = E_STATION_STATE.idle THEN
				eCLEAN := E_STATION_STATE.do_action1;
			END_IF
			IF eDROP = E_STATION_STATE.idle THEN
				eDROP := E_STATION_STATE.do_action1;
			END_IF
		END_IF
		IF (eSEPARATE1 = E_STATION_STATE.done AND eSEPARATE2 = E_STATION_STATE.done AND eSUPPLY = E_STATION_STATE.done  AND eCLEAN = E_STATION_STATE.done AND eDROP = E_STATION_STATE.done) THEN
			eSUPPLY := E_STATION_STATE.idle;
			eSEPARATE1 := E_STATION_STATE.idle;
			eSEPARATE2 := E_STATION_STATE.idle;
			eCLEAN := E_STATION_STATE.idle;
			eDROP := E_STATION_STATE.idle;
			eMAIN_STATE:=E_MAIN_STATE.move_next;
			bTIMEOUT:=FALSE;
		END_IF
		
		IF action_timeout.Q THEN
			eMAIN_STATE:=E_MAIN_STATE.error;
		END_IF
		
	E_MAIN_STATE.move_next: 
		IF eMAIN_CONVAYOR_STATE = E_CONVAYOR_STATE.idle THEN
			eMAIN_CONVAYOR_STATE := E_CONVAYOR_STATE.do_move;
		END_IF
		IF eSUPPLY_CONVAYOR_STATE = E_CONVAYOR_STATE.idle THEN
			eSUPPLY_CONVAYOR_STATE := E_CONVAYOR_STATE.do_move;
		END_IF
		IF eMAIN_CONVAYOR_STATE = E_CONVAYOR_STATE.done AND eSUPPLY_CONVAYOR_STATE = E_CONVAYOR_STATE.done THEN
			eMAIN_CONVAYOR_STATE := E_CONVAYOR_STATE.idle;
			eSUPPLY_CONVAYOR_STATE := E_CONVAYOR_STATE.idle;
			eMAIN_STATE:=E_MAIN_STATE.safety;
		END_IF
		
	E_MAIN_STATE.pause: 
		bTIMEOUT:=FALSE;
		IF ftrigRERUN.Q THEN
			eMAIN_STATE:=temp_state;
			eSUPPLY:=temp_supply_state;
			eSEPARATE1:=temp_sep1_state;
			eSEPARATE2:=temp_sep2_state;
			eCLEAN:=temp_clean_state;
			eDROP:=temp_drop_state;
			eMAIN_CONVAYOR_STATE:=temp_conv_state;
			eSUPPLY_CONVAYOR_STATE:=temp_conv_state;
		END_IF
		
	E_MAIN_STATE.estop: 
		//estop
	
	E_MAIN_STATE.error:
		// error	

END_CASE

IF rtrigRESET.Q THEN
	fbMAIN_CONV.A_set_cart_spaces();
	fbMAIN_CONV.A_SETUP();
	eMAIN_STATE:=E_MAIN_STATE.uninit;
END_IF

IF rtrigE_STOP.Q THEN
	
	A_ESTOP();
	
END_IF

IF rtrigINIT.Q THEN
	//eSUPPLY := E_STATION_STATE.estop;
	//eSEPARATE1 := E_STATION_STATE.estop;
	//eSEPARATE2 := E_STATION_STATE.estop;
	//eCLEAN := E_STATION_STATE.error;
	//eDROP := E_STATION_STATE.error;
	eMAIN_CONVAYOR_STATE := E_CONVAYOR_STATE.estop;
	eSUPPLY_CONVAYOR_STATE:=E_CONVAYOR_STATE.estop;
	b_E_STOP:=FALSE;
	bSafety_error:=FALSE;
	eMAIN_STATE:=E_MAIN_STATE.uninit;
END_IF

IF rtrigPAUSE.Q THEN
	temp_state:=eMAIN_STATE;
	temp_supply_state:=eSUPPLY;
	temp_sep1_state:=eSEPARATE1;
	temp_sep2_state:=eSEPARATE2;
	temp_clean_state:=eCLEAN;
	temp_drop_state:=eDROP;
	temp_conv_state:=eMAIN_CONVAYOR_STATE;
	temp_supconv_state:=eSUPPLY_CONVAYOR_STATE;
	eMAIN_STATE:=E_MAIN_STATE.pause;
	eSUPPLY:=E_STATION_STATE.pause;
	eSEPARATE1:=E_STATION_STATE.pause;
	eSEPARATE2:=E_STATION_STATE.pause;
	eMAIN_CONVAYOR_STATE:=E_CONVAYOR_STATE.pause;
	eSUPPLY_CONVAYOR_STATE:=E_CONVAYOR_STATE.pause;
	eCLEAN:=E_STATION_STATE.pause;
	eDROP:=E_STATION_STATE.pause;
	
END_IF


]]></ST>
    </Implementation>
    <Action Name="A_ESTOP" Id="{0f95b7f8-fe3e-4170-839c-0c5fb0dfe4a8}">
      <Implementation>
        <ST><![CDATA[gEventType:= 'Message'; 
	eMAIN_STATE:=E_MAIN_STATE.estop;
	eSUPPLY := E_STATION_STATE.estop;
	eSEPARATE1 := E_STATION_STATE.estop;
	eSEPARATE2 := E_STATION_STATE.estop;
	eCLEAN := E_STATION_STATE.estop;
	eDROP := E_STATION_STATE.estop;
	eMAIN_CONVAYOR_STATE := E_CONVAYOR_STATE.estop;
	eSUPPLY_CONVAYOR_STATE:=E_CONVAYOR_STATE.estop;
	Axis_MAIN.bHalt:=TRUE;
	Axis_SUPPLY.bHalt:=TRUE;	

	gEventSeverity:= 'Info';
	gEventIdentity:=999;
	gEventName:='MAIN';
	gEventText:='Emergency Stop';
	fbEventLogger.mAdd();]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PISTON_ERROR_CHECK" Id="{31fa973b-2552-4508-9ddd-0d789e896870}">
      <Implementation>
        <ST><![CDATA[FOR counter:=1 TO iNUMBER_OF_PISTONS BY 1 DO
	IF fbPiston[counter].PistonStatus = ePistonStatus.ERROR THEN
		eMAIN_STATE:=E_MAIN_STATE.error;
		
	END_IF
	
END_FOR;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_SAFETY_CHECK" Id="{d7d5bf32-283e-4dd1-af49-80d8b6309e6e}">
      <Implementation>
        <ST><![CDATA[FOR counter1:=1 TO num_of_carts BY 1 DO
	fbCART[counter1].A_CHECK();
END_FOR;

]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="247" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="306" Count="1" />
      <LineId Id="348" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="3" Count="6" />
      <LineId Id="430" Count="2" />
      <LineId Id="11" Count="8" />
      <LineId Id="433" Count="2" />
      <LineId Id="21" Count="12" />
      <LineId Id="389" Count="0" />
      <LineId Id="34" Count="115" />
      <LineId Id="158" Count="13" />
      <LineId Id="173" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="175" Count="29" />
      <LineId Id="263" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="205" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.A_ESTOP">
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="8" />
      <LineId Id="3" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="4" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.A_PISTON_ERROR_CHECK">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.A_SAFETY_CHECK">
      <LineId Id="2" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>